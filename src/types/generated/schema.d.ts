/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a paginated list of movies using the search query
         * @description Returns a paginated list of movies that can be filtered using releaseDate, title, genre, e.t.c.
         */
        get: {
            parameters: {
                query: {
                    /** @description The title of the movie to search for */
                    title?: string;
                    /** @description A list of movie genres to filter by */
                    genres?: components["schemas"]["Genre"][];
                    /** @description Filter movies by releaseDate (e.g., 2022, 2023) */
                    releaseDate?: string;
                    /** @description Filter movies by rating (e.g., >= 7.0) */
                    rating?: number[];
                    /** @description The page number to retrieve */
                    page: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of movies matching the search query */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Movies"];
                    };
                };
                /** @description Invalid request (e.g incorrect page or pageSize) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Movie not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the user's list of favorite movies */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of favorite movies */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Movies"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove a movie from the favorites list */
        delete: {
            parameters: {
                query: {
                    /** @description The ID of the movie to remove from favorites */
                    movieId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movie successfully removed from favorites */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Movies: {
            data: {
                id: string;
                /** @example You */
                title: string;
                /** @example Short Summary about this movie */
                description: string;
                images: string[];
                releaseDate: string;
                /**
                 * Format: float
                 * @example 4.3
                 */
                rating: number;
                genres: components["schemas"]["Genre"][];
                country: string;
                castCrew: string[];
                directors: string[];
                usCertificates: string[];
            }[];
            pagination: {
                page: number;
                /** @example 6 */
                totalPages: number;
                /** @example true */
                hasNext: boolean;
                /** @example false */
                hasPrevious: boolean;
                /** @example true */
                pageSize: boolean;
            };
        };
        ErrorResponse: {
            error?: {
                /** @example 400 */
                code?: number;
                /** @example Bad Request */
                message?: string;
                details?: {
                    /** @example page */
                    field?: string;
                    /** @example Page must be a positive integer */
                    issues?: string;
                }[];
            };
        };
        /** @enum {string} */
        Genre: "Action" | "Adventure" | "Animation" | "Comedy" | "Drama" | "Horror" | "Thriller" | "Sci-Fi" | "Fantasy" | "Romance" | "Mystery" | "Crime" | "Documentary" | "Musical" | "Historical" | "Culture" | "War" | "Biography" | "Western" | "Family" | "Sport";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
